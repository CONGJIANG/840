---
title: "Simulation2"
output: pdf_document
---

# Scenario 1: 
```{r}
library(igraph)
n <-10
bm <- diag(x =1, n, n)
#dimnames(bm) <- list(c("A","B","C","D","E"),c("Family1","Family2","Family3","Family4","Family5"))
fam <- paste("Family", 1:n, sep = "")
dimnames(bm) <- list(c(1:n), fam)
bg <- graph.incidence(bm)
# V(bg)$type 
# V(bg)$name

# labeldistances=c(0,0,0,0,0,0.6,0.6,0.6,0.6,.6) #The labels for the first 5 nodes will be in the center of the node, but the others will be offset

plot.igraph(bg,vertex.label.color="blue", vertex.size=15, vertex.label.font=4, vertex.color="green",edge.color="red") #The vertex.label.degree= argument tells where to put the label, in radians.
```


## Scenario 1.2: 
- Blip function : $\gamma_j(x_j, a_j; \psi_j) = a_j(\psi_{j0} + \psi_{j1}x_{j} + \psi_{j2}*h + \psi_{j3}*x*h)$ $\;$
  wherer $h =1$ if a person linked to the subject(such as spouse) receives the treatment, and $h =0$ otherwise.
  Truth : $$\mathop{\mathbb{E}[Y | \sim]}= \beta_0 + \beta_1X + \beta_2 X^2 + A(\psi_0 + \psi_1X + \psi_2H + \psi_3 HX)$$
    - H is generated by X_h. 
  
## model 1.2.1: 
$$\mathop{\mathbb{E}[Y | \sim]}= \beta_0 + \beta_1X + A(\psi_0 + \psi_1X)$$
    with weight $w(x) = |a - \mathop{\mathbb{E}[A | X_i=x_i]} |$

## model 1.2.2: 
$$\mathop{\mathbb{E}[Y | \sim]}= \beta_0 + \beta_1X + A(\psi_0 + \psi_1X + \psi_2H +\psi_3XH)$$
with weight $w_{a,h}(x) = |a - \mathop{\mathbb{E}[A | X_i=x_i]} |*|h - \mathop{\mathbb{E}[H | X_j=x_j]}|$

## model 1.2.3: 
$$\mathop{\mathbb{E}[Y | \sim]}= \beta_0 + \beta_1X + \beta_2H + A(\psi_0 + \psi_1X + \psi_2H + \psi_3XH)$$
with weight $w(x) = |a - \mathop{\mathbb{E}[A | X_i=x_i]} |$

## model 1.2.4: 
$$\mathop{\mathbb{E}[Y | \sim]}= \beta_0 + \beta_1X + \beta_2H + A(\psi_0 + \psi_1X + \psi_2H + \psi_3XH)$$
with weight $w_{a,h}(x) = |a - \mathop{\mathbb{E}[A | X_i=x_i]} |*|h - \mathop{\mathbb{E}[H | X_j=x_j]}|$

## model 1.2.5: 
$$\mathop{\mathbb{E}[Y | \sim]}= \beta_0 + \beta_1X + \beta_2H + \beta_3XH+ A(\psi_0 + \psi_1X + \psi_2H + \psi_3XH)$$
with weight $w_{a,h}(x) = |a - \mathop{\mathbb{E}[A | X_i=x_i]} |*|h - \mathop{\mathbb{E}[H | X_j=x_j]}|$
```{r}
expit <- function(x) 1/(1 + exp(-x)) 
# compute outcome following teh prescribed treatment rule
outcome <- function(mat, psi0 ,psi1 , psi2, psi3) {
  # mat is a matrix that columns are x, y, a, a_rec, h,
  # res <- y - a*(psi0 + psi1*x + psi2*h) + a_rec * (psi0 + psi1*x + psi2*h + psi3*x*h)
  res <- mat[2] - mat[3]*(psi0 + psi1*mat[1] + psi2*mat[5] + psi3*mat[1]*mat[5])+mat[4] * 
    (psi0 + psi1*mat[1] + psi2*mat[5]+ psi3*mat[1]*mat[5])
  res
}


alpha <- c(-2, -1, 0, 1,2)
psi <-c(-2, -1, -.5, 0, .5, 1, 2)
beta <- c(-1, -.5, 0, .5, 1, 2)


m <-1000  # m replications
n <-18000  # first n/2 are ageos, and second n/2 are alters.
Psi121 <- matrix(0, nrow = m, ncol =6)
decision1 <- matrix(0, nrow = n/2, 3)   # the number of rows of testing data
Psi122 <- matrix(0, nrow = m, ncol =8)
decision2 <- matrix(0, nrow = n/2, 2)
Psi123 <- matrix(0, nrow = m, ncol =9)
decision3 <- matrix(0, nrow = n/2, 2)
Psi124 <- matrix(0, nrow = m, ncol =9)
decision4 <- matrix(0, nrow = n/2, 2)
Psi125 <- matrix(0, nrow = m, ncol =10)
decision5 <- matrix(0, nrow = n/2, 2)
for (j in 1:m) {
   
  X <- rnorm(n) + 2
  Xsq <- X^2
  A <- rbinom(n, 1, expit( alpha[3] + alpha[2]*X))
  H <- c(A[(n/2 +1) : n], A[1:(n/2)])
  gamma <- A*(psi[1] + psi[6]*X + psi[6]*H + psi[6]*X*H)
  Y <-beta[6] + beta[5]*X + beta[4]*(Xsq) + gamma + rnorm(n)
  # generate ego data
  Xego <- X[1:(n/2)]
  Xego2 <- Xsq[1:(n/2)]
  Aego <- A[1:(n/2)]
  Hego <- H[1:(n/2)]
  Yego <- Y[1:(n/2)]
  # generate alters treatment
  Xalter <- X[(n/2 +1) : n]
  Xalter2 <- Xsq[(n/2 +1) : n]
  Aalter <- A[(n/2 +1) : n]
  Halter <- H[(n/2 +1) : n]
  Yalter <- Y[(n/2 +1) : n]
  
  
  # splitting for training and testing data. the first 1/2 of egos and alters are training; the last 1/2 are testing data. 
  # Training  (size of egos is n/2, so size of training egos are n/2*1/2 = n/4)
  X1 <- c(Xego[1: (n/4)], Xalter[1: (n/4)])
  X12 <- c(Xego2[1: (n/4)], Xalter2[1: (n/4)])
  A1 <-c(Aego[1: (n/4)], Aalter[1: (n/4)])
  Y1 <-c(Yego[1: (n/4)], Yalter[1: (n/4)])
  h <-c(Hego[1: (n/4)], Halter[1: (n/4)])
  X_h <-c(Xalter[1: (n/4)], Xego[1: (n/4)])
  
  #Testing (size of egos is n/2, so size of training egos are n/2*1/3 = n/6)  from (n/3 + 1): (n/2)
  Xego_test <- Xego[(n/4 + 1) : (n/2)]
  Xalter_test <- Xalter[(n/4 + 1) : (n/2)]
  X1_test <- c(Xego[(n/4 + 1) : (n/2)], Xalter[(n/4 + 1) : (n/2)])
  X12_test <- c(Xego2[(n/4 + 1) : (n/2)], Xalter2[(n/4 + 1) : (n/2)])
  A1_test <-c(Aego[(n/4 + 1) : (n/2)], Aalter[(n/4 + 1) : (n/2)])
  Y_test <-c(Yego[(n/4 + 1) : (n/2)], Yalter[(n/4 + 1) : (n/2)])
  h_test <-c(Hego[(n/4 + 1) : (n/2)], Halter[(n/4 + 1) : (n/2)])
  X_h_test <-c(Xalter[(n/4 + 1) :(n/2)], Xego[(n/4 + 1) : (n/2)])
  ## Treatment model

  treat.mod <- glm(A1~X1, family = 'binomial')
  H.treat.mod <- glm(h~X_h, family = 'binomial')

  ## weights
  w1 = abs(A1 - fitted(treat.mod))
  w2 = abs(A1 - fitted(treat.mod)) * abs(h - fitted(H.treat.mod))


  ## outcome model 1
  fit1<- lm(Y ~ X1 + A1 + I(A1*X1) , weights = w1)
  ## outcome model 2
  fit2 <- lm(Y ~ X1 + A1 + I(A1*X1) + I(A1*h) + I(A1*X1*h), weights = w2)
  ## outcome model 3
  fit3 <- lm(Y ~ X1 + h + A1 + I(A1*X1) + I(A1*h) + I(A1*X1*h), weights = w1)
  ## outcome model 4
  fit4 <- lm(Y ~ X1 + h + A1 + I(A1*X1) + I(A1*h) + I(A1*X1*h), weights = w2)
   ## outcome model 5
  fit5 <- lm(Y ~ X1 + h + A1 + I(X1*h) + I(A1*X1) + I(A1*h) + I(A1*X1*h), weights = w2)

  
  Psi121[j,1:4] <- as.vector(fit1$coefficients)
  Psi122[j,1:6] <- as.vector(fit2$coefficients)
  Psi123[j,1:7] <- as.vector(fit3$coefficients)
  Psi124[j,1:7] <- as.vector(fit4$coefficients)
  Psi124[j,1:8] <- as.vector(fit5$coefficients)
  # Model 1

  # decision correct ration model 1
  decision1[,1] <- psi[1] + psi[6]*X1_test + psi[6]*h_test + psi[6]*X1_test*h_test
  decision1[,2] <- fit1$coefficients[3] + fit1$coefficients[4]*X1_test
  decision1[,3] <- sign(decision1[,1] )==sign(decision1[,2])
  Psi121[j,5] <- sum(decision1[,3])/length(X1_test)  # correct ratio

  # population average outcome following teh prescribed treatment rule
  a_rec1 <- sapply(decision1[,2],function(x) if(x >0) 1 else 0)
  Psi121[j, 6] <- sum( apply(cbind(X1_test, Y_test, A1_test, a_rec1, h_test), 
                             1, outcome, psi0 = psi[1],psi1 = psi[6], psi2 = psi[6],psi3 = psi[6]))/length(X1_test)
  
  # Option 2
  decision1[1:(n/4),4] <- sapply( (fit1$coefficients[3] + fit1$coefficients[4]*Xego_test), function(x) if(x >0) 1 else 0)
  decision1[(n/4 + 1) : (n/2),4] <- sapply( (fit1$coefficients[3] + fit1$coefficients[4]*Xalter_test), function(x) if(x >0) 1 else 0)

  
##########
  # decision correct ration  model 2
  # do not coreate fist true decision column, just using decision1[,1]
  decision2[,1] <- fit2$coefficients[3] + fit2$coefficients[4]*X1_test + 
    fit2$coefficients[5]*h_test + fit2$coefficients[6]*X1_test *h_test
  decision2[,2] <- sign(decision1[,1] ) == sign(decision2[,1])
  Psi122[j,7] <- sum(decision2[,2])/length(X1_test) 
  # population average outcome following teh prescribed treatment rule
  a_rec2 <- sapply(decision2[,1],function(x) if(x >0) 1 else 0)
  Psi122[j, 8] <-sum( apply(cbind(X1_test, Y_test, A1_test, a_rec2, h_test), 
                             1, outcome, psi0 = psi[1],psi1 = psi[6], psi2 = psi[6],psi3 = psi[6]))/length(X1_test)
  
  #Option 2
  decision2[1:(n/4),3] <- sapply( (fit2$coefficients[3] + fit2$coefficients[4]*Xego_test ), 
                                  function(x) if(x >0) 1 else 0)
  decision2[(n/4 + 1) : (n/2),3] <- sapply( (fit2$coefficients[3] + fit2$coefficients[4]*Xalter_test + fit2$coefficients[5]*decision2[1:(n/4),3]  + fit2$coefficients[6]*Xalter_test*decision2[1:(n/4),3])
                                            ,function(x) if(x >0) 1 else 0)
  
  
  
##########
  decision3[,1] <- fit3$coefficients[4] + fit3$coefficients[5]*X1_test + 
    fit3$coefficients[6]*h_test + fit3$coefficients[7]*X1_test*h_test
  decision3[,2] <- sign(decision1[,1] ) == sign(decision3[,1])
  Psi123[j,8]  <- sum(decision3[,2])/length(X1_test)
  a_rec3 <- sapply(decision3[,1],function(x) if(x >0) 1 else 0)
  Psi123[j, 9] <- sum( apply(cbind(X1_test, Y_test, A1_test, a_rec3, h_test), 
                             1, outcome, psi[1], psi[6], psi[6], psi[6]))/length(X1_test)
#Option 2
  decision3[1:(n/4),3] <- sapply( (fit3$coefficients[4] + fit3$coefficients[5]*Xego_test ), 
                                  function(x) if(x >0) 1 else 0)
  decision3[(n/4 + 1) : (n/2),3] <- sapply( (fit3$coefficients[4] + fit3$coefficients[5]*Xalter_test + fit3$coefficients[6]*decision3[1:(n/4),3]  + fit3$coefficients[7]*Xalter_test*decision3[1:(n/4),3])
                                            ,function(x) if(x >0) 1 else 0)
 ##########
  decision4[,1] <- fit4$coefficients[4] + fit4$coefficients[5]*X1_test + 
    fit4$coefficients[6]*h_test + fit4$coefficients[7]*X1_test*h_test
  decision4[,2] <- sign(decision1[,1] ) == sign(decision4[,1])
  Psi124[j,8]  <- sum(decision4[,2])/length(X1_test)
  a_rec4 <- sapply(decision4[,1],function(x) if(x >0) 1 else 0)
  Psi124[j, 9] <- sum( apply(cbind(X1_test, Y_test, A1_test, a_rec4, h_test), 
                             1, outcome, psi[1], psi[6], psi[6], psi[6]))/length(X1_test)
#Option 2
  decision4[1:(n/4),3] <- sapply( (fit4$coefficients[4] + fit4$coefficients[5]*Xego_test ), 
                                  function(x) if(x >0) 1 else 0)
  decision4[(n/4 + 1) : (n/2),3] <- sapply( (fit4$coefficients[4] + fit4$coefficients[5]*Xalter_test + fit4$coefficients[6]*decision4[1:(n/4),3]  + fit4$coefficients[7]*Xalter_test*decision4[1:(n/4),3])
                                            ,function(x) if(x >0) 1 else 0)
  
}
colnames(Psi121) <- c("beta0", "beta 1", "psi0", "psi1","correct ratio", "population average outcome")
colnames(Psi122) <- c("beta0", "beta 1", "psi0", "psi1", "psi2", "psi3", "correct ratio", "population average outcome")
colnames(Psi123) <- c("beta0", "beta 1", "beta 2","psi0", "psi1","psi2","psi3","correct ratio" ,"population average outcome")
colnames(Psi124) <- c("beta0", "beta 1", "beta 2","psi0", "psi1","psi2","psi3","correct ratio" ,"population average outcome")
Psi121[1:10,]
Psi122[1:10,]
Psi123[1:10,]
Psi124[1:10,]

```


```{r}
apply(Psi121, 2, mean)
#proph <- apply(Psi121, 2, mean)[5]
#proph
boxplot(Psi121[,3], Psi121[,4], names=c("Psi0", "Psi1") )
abline(h = 1, col = "green")
abline(h = -2, col = "red") 
```


```{r}
apply(Psi122, 2, mean)
#proph <- apply(Psi122, 2, mean)[6]
#proph
boxplot(Psi122[,3], Psi122[,4], Psi122[,5],Psi122[,6],  names=c("Psi0", "Psi1", "Psi2","Psi3") )
abline(h = 1, col = "green")
abline(h = -2, col = "red") 
```



```{r}
apply(Psi123, 2, mean)
boxplot(Psi123[,4], Psi123[,5], Psi123[,6], Psi123[,6], names=c("Psi0", "Psi1", "Psi2","Psi3") )
abline(h = 1, col = "green")
abline(h = -2, col = "red") 
```





```{r}
apply(Psi124, 2, mean)
boxplot(Psi124[,4], Psi124[,5], Psi124[,6], Psi124[,6], names=c("Psi0", "Psi1", "Psi2","Psi3") )
abline(h = 1, col = "green")
abline(h = -2, col = "red") 
```



```{r}
## Compute the 'optimized' treatment decision for each pair.
## output are 1,2,3,4, which mean  1: (0,0); 2: (0,1); 3: (1,0); 4: (1,1). 
Opttrtd <- function(psi0,psi1,psi2,psi3, xi, xj){
  Y01 <- psi0 + psi1*xj
  Y10 <- psi0 + psi1*xi
  Y11 <- (psi0 + psi1xi + psi2 + psi3*xi) + (psi0 + psi1xj + psi2 + psi3*xj)
  # which funciton to find the max value of Y.   
  # 1: (0,0); 2: (0,1); 3: (1,0); 4: (1,1). 
  which(c(0, Y01, Y10, Y11) == max(c(0, Y01, Y10, Y11)))
}

```

