---
title: "a3"
output:
  pdf_document: default
  html_document: default
---

```{r, warning=FALSE, cache = TRUE}
library(Matching)
getgam <- function(mydata = mydata, ps =ps){
  
  # matching
  mydata$ps <- ps
  psmatch<-Match(Tr=mydata$A, M=1, X=mydata$ps)
  matched<-mydata[unlist(psmatch[c("index.treated","index.control")]), ]
  a1 <-summary(glm(eta ~ A, family = poisson(), data = matched))$coefficients[2]
  
  # IPW
  w <- mydata$A/ps + (1-mydata$A)/(1-ps)
  a2 <- summary(glm(eta ~ A, family = poisson(), weight = w, data = mydata))$coefficients[2]
  
  # Stratification
  q <-quantile(ps, probs = seq(0,1, length = 6))
  r1 <- summary(glm(eta ~ A, family = poisson(), data = mydata[ps <= q[[2]], ]))$coefficients[2]
  r2 <- summary(glm(eta ~ A, family = poisson(), data = mydata[ (q[[2]] < ps & ps <= q[[3]]), ]))$coefficients[2]
  r3 <- summary(glm(eta ~ A, family = poisson(), data = mydata[ (q[[3]] < ps & ps <= q[[4]]), ]))$coefficients[2]
  r4 <- summary(glm(eta ~ A, family = poisson(), data = mydata[ (q[[4]] < ps & ps <= q[[5]]), ]))$coefficients[2]
  r5 <- summary(glm(eta ~ A, family = poisson(), data = mydata[ (q[[5]] <= ps), ]))$coefficients[2]
  a3 <-mean(c(r1,r2,r3,r4,r5))
  return(c(a1,a2,a3))
}


n <- 2500
x1 <- rnorm(n)
x2 <- rnorm(n)
x3 <- rnorm(n)
expit <- function(x) 1/(1 + exp(-x)) 
A <- rbinom(n, 1, expit( .5*x1 + .75*x3))
gamma0<-.5
eta <- exp( 0.5 + 4*(1 + exp(-3 * x1))^(-1) + x2 + gamma0 * A)

mydata<-data.frame(x1,x2,x3,A,eta)
# mydata<-data.frame(mydata)



psmodel1 <- glm(A ~ x1, family = binomial(link = "logit"))
ps1<-psmodel1$fitted.values

getgam(mydata = mydata, ps =ps1)


psmodel2 <- glm(A ~ x1 + x3, family = binomial(link = "logit"))
ps2<-psmodel2$fitted.values

getgam(mydata = mydata, ps =ps2)


psmodel3 <- glm(A ~ x1 + x2, family = binomial(link = "logit"))
ps3<-psmodel3$fitted.values

getgam(mydata = mydata, ps =ps3)


psmodel4 <- glm(A ~ x1 + x2 + x3, family = binomial(link = "logit"))
ps4<-psmodel4$fitted.values

getgam(mydata = mydata, ps =ps4)
```


Here is Generating Data function:
```{r, cache = TRUE}
set.seed(1)
n <- 2500
gamma0<-.5
GeneD <- function(n){
  
  x1 <- rnorm(n)
  x2 <- rnorm(n)
  x3 <- rnorm(n)
  A <- rbinom(n, 1, expit( .5*x1 + .75*x3))
  eta <- exp( 0.5 + 4*(1 + exp(-3 * x1))^(-1) + x2 + .5 * A)
  
  mydata<-data.frame(x1,x2,x3,A,eta)
  mydata
}

### for i= 1000 replications 
### you can have a simple testing, we suppose i =3, and n =5
dat <- lapply(1:1000, function(i) GeneD(n) )
# dat
# save(dat, file = "sim.rda")

psmodel1 <- glm(A ~ x1, family = binomial(link = "logit"))
ps1<-psmodel1$fitted.values

library(parallel)
nCores <- detectCores()
m1 <- mclapply(dat, getgam, ps =ps1, mc.cores = nCores)
m1 <- do.call(rbind, m1)

table1 <- matrix(0, 4, 3)
table2 <- matrix(0, 4, 3)
table3 <- matrix(0, 4, 3)
colnames(table1) <- c("Bias","SD","MSE")
rownames(table1) <- c("Model1","Model2","Model3","Model4")
colnames(table2) <- c("Bias","SD","MSE")
rownames(table2) <- c("Model1","Model2","Model3","Model4")
colnames(table3) <- c("Bias","SD","MSE")
rownames(table3) <- c("Model1","Model2","Model3","Model4")
# bias
bias1 <- apply(m1, 2, mean) - .5
bias1

diff = m1 - apply(m1, 2, mean)
diff2 = apply(diff, c(1,2), function(x) x^2)
# SD
SD1 <- sqrt(apply(diff2, 2, sum)/999)
SD1
# MSE
MSE1 <- apply(diff2, 2, mean)

# Matching
table1[1,1] <- bias1[1]
table1[1,2] <- SD1[1]
table1[1,3] <- MSE1[1]
# IWP
table2[1,1] <- bias1[2]
table2[1,2] <- SD1[2]
table2[1,3] <- MSE1[2]
#  stratification
table3[1,1] <- bias1[3]
table3[1,2] <- SD1[3]
table3[1,3] <- MSE1[3]
```


# Model 2
```{r,  cache = TRUE}
psmodel2 <- glm(A ~ x1 + x3, family = binomial(link = "logit"))
ps2<-psmodel2$fitted.values
library(parallel)
m2 <- mclapply(dat, getgam, ps =ps2, mc.cores = nCores)
m2 <- do.call(rbind, m2)


# bias
bias2 <- apply(m2, 2, mean) - .5
bias2

diff = m2 - apply(m2, 2, mean)
diff2 = apply(diff, c(1,2), function(x) x^2)
# SD
SD2 <- sqrt(apply(diff2, 2, sum)/999)
SD2
# MSE
MSE2 <- apply(diff2, 2, mean)

table1[2,1] <- bias2[1]
table1[2,2] <- SD2[1]
table1[2,3] <- MSE2[1]

table2[2,1] <- bias2[2]
table2[2,2] <- SD2[2]
table2[2,3] <- MSE2[2]

table3[2,1] <- bias2[3]
table3[2,2] <- SD2[3]
table3[2,3] <- MSE2[3]
```




# Model 3
```{r, cache = TRUE}
psmodel3 <- glm(A ~ x1 + x2, family = binomial(link = "logit"))
ps3<-psmodel3$fitted.values
library(parallel)
m3 <- mclapply(dat, getgam, ps =ps3, mc.cores = nCores)
m3 <- do.call(rbind, m3)


# bias
bias3 <- apply(m3, 2, mean) - .5
bias3

diff = m3 - apply(m3, 2, mean)
diff2 = apply(diff, c(1,2), function(x) x^2)
# SD
SD3 <- sqrt(apply(diff2, 2, sum)/999)
SD3
# MSE
MSE3 <- apply(diff2, 2, mean)

table1[3,1] <- bias3[1]
table1[3,2] <- SD3[1]
table1[3,3] <- MSE3[1]

table2[3,1] <- bias3[2]
table2[3,2] <- SD3[2]
table2[3,3] <- MSE3[2]

table3[3,1] <- bias3[3]
table3[3,2] <- SD3[3]
table3[3,3] <- MSE3[3]
```

# Model 4
```{r, cache = TRUE}
psmodel4 <- glm(A ~ x1 + x2 + x3, family = binomial(link = "logit"))
ps4<-psmodel4$fitted.values
library(parallel)
m4 <- mclapply(dat, getgam, ps =ps4, mc.cores = nCores)
m4 <- do.call(rbind, m4)


# bias
bias4 <- apply(m4, 2, mean) - .5
bias4

diff = m4 - apply(m4, 2, mean)
diff2 = apply(diff, c(1,2), function(x) x^2)
# SD
SD4 <- sqrt(apply(diff2, 2, sum)/999)
SD4
# MSE
MSE4 <- apply(diff2, 2, mean)

table1[4,1] <- bias4[1]
table1[4,2] <- SD4[1]
table1[4,3] <- MSE4[1]

table2[4,1] <- bias4[2]
table2[4,2] <- SD4[2]
table2[4,3] <- MSE4[2]

table3[4,1] <- bias4[3]
table3[4,2] <- SD4[3]
table3[4,3] <- MSE4[3]
```

```{r}
table1
table2
table3
```



