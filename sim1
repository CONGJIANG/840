---
title: "May16"
output: pdf_document
---

# Scenario 1: 
```{r}
library(igraph)
n <-10
bm <- diag(x =1, n, n)
#dimnames(bm) <- list(c("A","B","C","D","E"),c("Family1","Family2","Family3","Family4","Family5"))
fam <- paste("Family", 1:n, sep = "")
dimnames(bm) <- list(c(1:n), fam)
bg <- graph.incidence(bm)
# V(bg)$type 
# V(bg)$name

# labeldistances=c(0,0,0,0,0,0.6,0.6,0.6,0.6,.6) #The labels for the first 5 nodes will be in the center of the node, but the others will be offset

plot.igraph(bg,vertex.label.color="blue", vertex.size=15, vertex.label.font=4, vertex.color="green",edge.color="red") #The vertex.label.degree= argument tells where to put the label, in radians.
```


## Scenario 1.1: 
- Blip function : $\gamma_j(x_j, a_j; \psi_j) = a_j(\psi_{j0} + \psi_{j1}x_{j} + \psi_{j2}*h)$ $\;$
wherer $h =1$ if a person linked to the subject(such as spouse) receives the treatment, and $h =0$ otherwise.
Truth : $$\mathop{\mathbb{E}[Y | \sim]}= \beta_0 + \beta_1X + \beta_2 X^2 + A(\psi_0 + \psi_1X + \psi_2H) $$
- H is generated by X_h. 

## model 1.1.1:
$$\mathop{\mathbb{E}[Y | \sim]}= \beta_0 + \beta_1X + A(\psi_0 + \psi_1X )$$
with weight $w_{a,h}(x) = |a - \mathop{\mathbb{E}[A | X_i=x_i]} |$

## model 1.1.2: 
$$\mathop{\mathbb{E}[Y | \sim]}= \beta_0 + \beta_1X + A(\psi_0 + \psi_1X + \psi_2H)$$
with weight $w_{a,h}(x) = |a - \mathop{\mathbb{E}[A | X_i=x_i]} |*|h - \mathop{\mathbb{E}[H | X_j=x_j]}|$

## model 1.1.3: 
$$\mathop{\mathbb{E}[Y | \sim]}= \beta_0 + \beta_1X + \beta_2H + A(\psi_0 + \psi_1X + \psi_2H)$$
with weight $w_(x) = |a - \mathop{\mathbb{E}[A | X_i=x_i]} |$

```{r}
expit <- function(x) 1/(1 + exp(-x)) 
# compute outcome following teh prescribed treatment rule
outcome1 <- function(x, b0, b1, psi0, psi1) {
  a <- if ( (psi0 + psi1*x ) > 0 )  1 else 0
  yavg <- b0 + b1*x + a
  yavg
}

outcome2 <- function( mat, b0, b1, psi0, psi1, psi2) {
    # the 1st element of mat is x, and 2nd element is h. 
    # b0, b1, psi0, psi1, psi2 are estimated parameters form your proposed model
  a <- if ( (psi0 + psi1*mat[1] + psi2*mat[2]) > 0 )  1 else 0
  y <- b0 + b1*mat[1] + a
  y
}

outcome3 <- function( mat, b0, b1, b2, psi0, psi1, psi2) {
    # the 1st element of mat is x, and 2nd element is h. 
    # b0, b1, b2, psi0, psi1, psi2 are estimated parameters form your proposed model
  a <- if ( (psi0 + psi1*mat[1] + psi2*mat[2]) > 0 )  1 else 0
  y <- b0 + b1*mat[1] + b2*mat[2] + a
  y
}


alpha <- c(-2, -1, 0, 1,2)
psi <-c(-2, -1, -.5, 0, .5, 1, 2)
beta <- c(-1, -.5, 0, .5, 1, 2)


m <-1000  # m replications
n <-18000  # first n/2 are ageos, and second n/2 are alters.
Psi111 <- matrix(0, nrow = m, ncol =6)
decision1 <- matrix(0, nrow = n/3, 3)
Psi112 <- matrix(0, nrow = m, ncol =7)
decision2 <- matrix(0, nrow = n/3, 2)
Psi113 <- matrix(0, nrow = m, ncol =8)
decision3 <- matrix(0, nrow = n/3, 2)
for (j in 1:m) {
   
  X <- rnorm(n) + 2
  Xsq <- X^2
  A <- rbinom(n, 1, expit( alpha[3] + alpha[2]*X))
  # generate ego data
  Xego <- X[1:(n/2)]
  Xego2 <- Xsq[1:(n/2)]
  Aego <- A[1:(n/2)]
  # generate alters treatment
  halter <- A[(n/2 +1) : n]
  X_halter <- X[(n/2 +1) : n]
  ## for Y
  gamma1 <- Aego * (psi[1] + psi[6]*Xego + psi[6]*halter)
  Yego <- beta[6] + beta[5]*Xego + beta[4]*(Xego2) + gamma1 + rnorm(n/2)
  
  
  # splitting for training and testing data. the first 2/3 of egos and alters are training; the last 1/3 are testing data. 
  # Training  (size of egos is n/2, so size of training egos are n/2*2/3 = n/3)
  X1 <- Xego[1: (n/3)]
  X12 <- Xego2[1: (n/3)]
  A1 <-Aego[1: (n/3)]
  Y <-Yego[1: (n/3)]
  h <-halter[1: (n/3)]
  X_h <-X_halter[1: (n/3)]
  
  #Testing (size of egos is n/2, so size of training egos are n/2*1/3 = n/6)  from (n/3 + 1): (n/2)
  
  ## Treatment model

  treat.mod <- glm(A1~X1, family = 'binomial')
  H.treat.mod <- glm(h~X_h, family = 'binomial')

  ## weights
  w1 = abs(A1 - fitted(treat.mod))
  w2 = abs(A1 - fitted(treat.mod)) * abs(h - fitted(H.treat.mod))


  ## outcome model 1
  fit1<- lm(Y ~ X1 + A1 + I(A1*X1) , weights = w1)
  ## outcome model 2
  fit2 <- lm(Y ~ X1 + A1 + I(A1*X1) + I(A1*h), weights = w2)
  ## outcome model 3
  fit3 <- lm(Y ~ X1 + h + A1 + I(A1*X1) + I(A1*h), weights = w1)

  
  Psi111[j,1:4] <- as.vector(fit1$coefficients)
  Psi112[j,1:5] <- as.vector(fit2$coefficients)
  Psi113[j,1:6] <- as.vector(fit3$coefficients)

  # decision correct ration model 1
  decision1[,1] <- psi[1] + psi[6]*X1 + psi[6]*h
  decision1[,2] <- fit1$coefficients[3] + fit1$coefficients[4]*X1
  decision1[,3] <- sign(decision1[,1] )==sign(decision1[,2])
  Psi111[j,5] <- sum(decision1[,3])/length(X1)  # correct ratio

  # population average outcome following teh prescribed treatment rule
  Psi111[j, 6] <- sum (sapply(X1, outcome1, 
                              fit1$coefficients[1],fit1$coefficients[2],fit1$coefficients[3],fit1$coefficients[4]))/length(X1)
  
##########
  # decision correct ration  model 2
  # do not coreate fist true decision column, just using decision1[,1]
  decision2[,1] <- fit2$coefficients[3] + fit2$coefficients[4]*X1 + fit2$coefficients[5]*h
  decision2[,2] <- sign(decision1[,1] ) == sign(decision2[,1])
  Psi112[j,6] <- sum(decision2[,2])/length(X1) 
  # population average outcome following teh prescribed treatment rule
  Psi112[j, 7] <- sum (apply( cbind(X1,h), 1, outcome2, fit2$coefficients[1],fit2$coefficients[2],fit2$coefficients[3],
                             fit2$coefficients[4],fit2$coefficients[5]))/length(X1)
  
  
  
##########
  decision3[,1] <- fit3$coefficients[4] + fit3$coefficients[5]*X1 + fit3$coefficients[6]*h
  decision3[,2] <- sign(decision1[,1] ) == sign(decision3[,1])
  Psi113[j,7]  <- sum(decision3[,2])/length(X1)
  Psi113[j, 8] <- sum (apply( cbind(X1,h), 1, outcome3, fit3$coefficients[1],fit3$coefficients[2],fit3$coefficients[3],
                             fit3$coefficients[4],fit3$coefficients[5], fit3$coefficients[6]))/length(X1)

  
}
colnames(Psi111) <- c("beta0", "beta 1", "psi0", "psi1","correct ratio", "population average outcome")
colnames(Psi112) <- c("beta0", "beta 1", "psi0", "psi1", "psi2", "correct ratio", "population average outcome")
colnames(Psi113) <- c("beta0", "beta 1", "beta 2","psi0", "psi1","psi2","correct ratio" ,"population average outcome")
Psi111[1:10,]
Psi112[1:10,]
Psi113[1:10,]

```


```{r}
apply(Psi111, 2, mean)
#proph <- apply(Psi111, 2, mean)[5]
#proph
boxplot(Psi111[,3], Psi111[,4], names=c("Psi0", "Psi1") )
abline(h = 1, col = "green")
abline(h = -2, col = "red") 
```


```{r}
apply(Psi112, 2, mean)
#proph <- apply(Psi112, 2, mean)[6]
#proph
boxplot(Psi112[,3], Psi112[,4], Psi112[,5],  names=c("Psi0", "Psi1", "Psi2") )
abline(h = 1, col = "green")
abline(h = -2, col = "red") 
```



```{r}
apply(Psi113, 2, mean)
boxplot(Psi113[,4], Psi113[,5], Psi113[,6],  names=c("Psi0", "Psi1", "Psi2") )
abline(h = 1, col = "green")
abline(h = -2, col = "red") 
```




