---
title: "May16"
output: pdf_document
---

# Scenario 1: 
```{r}
library(igraph)
n <-10
bm <- diag(x =1, n, n)
#dimnames(bm) <- list(c("A","B","C","D","E"),c("Family1","Family2","Family3","Family4","Family5"))
fam <- paste("Family", 1:n, sep = "")
dimnames(bm) <- list(c(1:n), fam)
bg <- graph.incidence(bm)
# V(bg)$type 
# V(bg)$name

# labeldistances=c(0,0,0,0,0,0.6,0.6,0.6,0.6,.6) #The labels for the first 5 nodes will be in the center of the node, but the others will be offset

plot.igraph(bg,vertex.label.color="blue", vertex.size=15, vertex.label.font=4, vertex.color="green",edge.color="red") #The vertex.label.degree= argument tells where to put the label, in radians.
```


## Scenario 1.1: 
- Blip function : $\gamma_j(x_j, a_j; \psi_j) = a_j(\psi_{j0} + \psi_{j1}x_{j} + \psi_{j2}*h)$ $\;$
wherer $h =1$ if a person linked to the subject(such as spouse) receives the treatment, and $h =0$ otherwise.
Truth : $$\mathop{\mathbb{E}[Y | \sim]}= \beta_0 + \beta_1X + \beta_2 X^2 + A(\psi_0 + \psi_1X + \psi_2H) $$
- H is generated by X_h. 

## model 1.1.1:


$$\mathop{\mathbb{E}[Y | \sim]}= \beta_0 + \beta_1X + A(\psi_0 + \psi_1X )$$
with weight $w_{a,h}(x) = |a - \mathop{\mathbb{E}[A | X_i=x_i]} |$
```{r}
expit <- function(x) 1/(1 + exp(-x)) 
# compute population average outcome following teh prescribed treatment rule
# b0, b1, psi0, psi1 are all estimated parameters from your proposed model.  (outcome need to be changed according to your proposed mdoel)

outcome <- function(x, b0, b1, psi0, psi1) {
  a <- if ( (psi0 + psi1*x ) > 0 )  1 else 0
  yavg <- b0 + b1*x + a
  yavg
}

#x <- c(1:10)
# sum (sapply(x, outcome, 1,1,1,1))/length(x)

alpha0 <- c(-2, -1, 0, 1,2)
alpha1 <- c(-2, -1, 0, 1,2)

psi <-c(-2, -1, -.5, 0, .5, 1, 2)
beta <- c(-1, -.5, 0, .5, 1, 2)


m <-1000  # m replications
n <-10000
Psi111 <- matrix(0, nrow = m, ncol =6)
decision <- matrix(0, nrow = n, 3)
for (j in 1:m) {
  # N = 1000, for first 500 are ego, and second 500 are alters. 
  X <- rnorm(n) + 2
  Xsq <- X^2
  A <- rbinom(n, 1, expit( alpha0[3] + alpha1[2]*X))
  # generate ego data
  X1 <- X[1:(n/2)]
  X12 <- Xsq[1:(n/2)]
  A1 <- A[1:(n/2)]
  # generate alters treatment
  h <- A[(n/2 +1) : n]
  X_h <- X[(n/2 +1) : n]
  ## for Y
  gamma1 <- A1 * (psi[1] + psi[6]*X1 + psi[6]*h)
  Y <- beta[6] + beta[5]*X1 + beta[4]*(X12) + gamma1 + rnorm(n/2)
  ### Treatment model

  treat.mod <- glm(A1~X1, family = 'binomial')
  
  # H.treat.mod <- glm(h~X_h, family = 'binomial')

  w = abs(A1 - fitted(treat.mod))

  # outcome model/regression:
  fit <- lm(Y ~ X1 + A1 + I(A1*X1) , weights = w)
  # outcome model/regression:
  # fit <- lm(Y ~ X1 + h + I(X1 * h) +  A1 + I(A1*X1) + I(A1*h) + I(A1*X1*h) , weights = abs(A1 - fitted(treat.mod)))
  
  Psi111[j,1:4] <- as.vector(fit$coefficients)

  # decision correct ration
  decision[,1] <- psi[1] + psi[6]*X1 + psi[6]*h
  decision[,2] <- fit$coefficients[3] + fit$coefficients[4]*X1
  decision[,3] <- sign(decision[,1] )==sign(decision[,2])
  prop <- sum(decision[,3])/n
  Psi111[j,5] <- prop
  
  
  # population average outcome following teh prescribed treatment rule
  Psi111[j, 6] <- sum (sapply(X1, outcome, fit$coefficients[1],fit$coefficients[2],fit$coefficients[3],fit$coefficients[4]))/length(X1)
}
colnames(Psi111) <- c("beta0", "beta 1", "psi0", "psi1","correct ratio", "population average outcome")
Psi111[1:10,]

```

```{r}
apply(Psi111, 2, mean)
#proph <- apply(Psi111, 2, mean)[5]
#proph
boxplot(Psi111[,3], Psi111[,4], names=c("Psi0", "Psi1") )
abline(h = 1, col = "green")
abline(h = .5, col = "red") 
```







#####################################################

## model 1.1.2: 
$$\mathop{\mathbb{E}[Y | \sim]}= \beta_0 + \beta_1X + A(\psi_0 + \psi_1X + \psi_2H)$$
with weight $w_{a,h}(x) = |a - \mathop{\mathbb{E}[A | X_i=x_i]} |*|h - \mathop{\mathbb{E}[H | X_j=x_j]}|$
```{r}
expit <- function(x) 1/(1 + exp(-x)) 

outcome <- function( mat, b0, b1, psi0, psi1, psi2) {
  # the 1st column of mat is x, and 2nd column is h. 
  a <- if ( (psi0 + psi1*mat[1] + psi2*mat[2]) > 0 )  1 else 0
  y <- b0 + b1*mat[1] + a
  y
}

alpha0 <- c(-2, -1, 0, 1,2)
alpha1 <- c(-2, -1, 0, 1,2)

psi <-c(-2, -1, -.5, 0, .5, 1, 2)
    beta <- c(-1, -.5, 0, .5, 1, 2)


m <-1000  # m replications
n <-10000
Psi112 <- matrix(0, nrow = m, ncol =7)
decision <- matrix(0, nrow = n, 3)
for (j in 1:m) {
  # N = 1000, for first 500 are ego, and second 500 are alters. 
  X <- rnorm(n) + 2
  Xsq <- X^2
  A <- rbinom(n, 1, expit( alpha0[3] + alpha1[2]*X))
  # generate ego data
  X1 <- X[1:(n/2)]
  X12 <- Xsq[1:(n/2)]
  A1 <- A[1:(n/2)]
  # generate alters treatment
  h <- A[(n/2 +1) : n]
  X_h <- X[(n/2 +1) : n]
  ## for Y
  gamma1 <- A1 * (psi[1] + psi[6]*X1 + psi[6]*h)
  Y <- beta[6] + beta[5]*X1 + beta[4]*(X12)  + gamma1 + rnorm(n/2)
  ### Treatment model

  treat.mod <- glm(A1~X1, family = 'binomial')
  
  H.treat.mod <- glm(h~X_h, family = 'binomial')

  w2 = abs(A1 - fitted(treat.mod)) * abs(h - fitted(H.treat.mod))

  # outcome model/regression:
  fit <- lm(Y ~ X1 + A1 + I(A1*X1) + I(A1*h), weights = w2)
  # outcome model/regression:
  # fit <- lm(Y ~ X1 + h + I(X1 * h) +  A1 + I(A1*X1) + I(A1*h) + I(A1*X1*h) , weights = abs(A1 - fitted(treat.mod)))
  
  Psi112[j,1:5] <- as.vector(fit$coefficients)
  
  

  decision[,1] <- psi[1] + psi[6]*X1 + psi[6]*h
  decision[,2] <- fit$coefficients[3] + fit$coefficients[4]*X1 + fit$coefficients[5]*h
  decision[,3] <- sign(decision[,1] )==sign(decision[,2])
  prop <- sum(decision[,3])/n
  Psi112[j,6] <- prop
  
  # population average outcome following teh prescribed treatment rule
  
  Psi112[j, 7] <- sum (apply( cbind(X1,h), 1, outcome, fit$coefficients[1],fit$coefficients[2],fit$coefficients[3],
                             fit$coefficients[4],fit$coefficients[5]))/length(X1)
}
colnames(Psi112) <- c("beta0", "beta 1", "psi0", "psi1", "psi2", "correct ratio", "population average outcome")
Psi112[1:10,]

```

```{r}
apply(Psi112, 2, mean)
#proph <- apply(Psi112, 2, mean)[6]
#proph
boxplot(Psi112[,3], Psi112[,4], Psi112[,5],  names=c("Psi0", "Psi1", "Psi2") )
abline(h = 1, col = "green")
abline(h = -2, col = "red") 
abline(h = 2, col = "red") 
```

## model 1.1.3: 
$$\mathop{\mathbb{E}[Y | \sim]}= \beta_0 + \beta_1X + \beta_2H + A(\psi_0 + \psi_1X + \psi_2H)$$
with weight $w_(x) = |a - \mathop{\mathbb{E}[A | X_i=x_i]} |$
```{r}
expit <- function(x) 1/(1 + exp(-x)) 
outcome <- function( mat, b0, b1,b2, psi0, psi1, psi2) {
  # the 1st column of mat is x, and 2nd column is h. 
  a <- if ( (psi0 + psi1*mat[1] + psi2*mat[2]) > 0 )  1 else 0
  y <- b0 + b1*mat[1] + b2*mat[2] + a
  y
}

alpha0 <- c(-2, -1, 0, 1,2)
alpha1 <- c(-2, -1, 0, 1,2)

psi <-c(-2, -1, -.5, 0, .5, 1, 2)
    beta <- c(-1, -.5, 0, .5, 1, 2)


m <-1000  # m replications
n <-10000
Psi113 <- matrix(0, nrow = m, ncol =8)
decision <- matrix(0, nrow = n, 3)
for (j in 1:m) {
  # N = 1000, for first 500 are ego, and second 500 are alters. 
  X <- rnorm(n) + 2
  Xsq <- X^2
  A <- rbinom(n, 1, expit( alpha0[3] + alpha1[2]*X))
  # generate ego data
  X1 <- X[1:(n/2)]
  X12 <- Xsq[1:(n/2)]
  A1 <- A[1:(n/2)]
  # generate alters treatment
  h <- A[(n/2 +1) : n]
  # X_h <- X[(n/2 +1) : n]
  ## for Y
  gamma1 <- A1 * (psi[1] + psi[6]*X1 + psi[6]*h)
  Y <- beta[6] + beta[5]*X1 + beta[4]*(X12)  + gamma1 + rnorm(n/2)
  ### Treatment model

  treat.mod <- glm(A1~X1, family = 'binomial')
  
  w2 = abs(A1 - fitted(treat.mod)) # * abs(h - fitted(H.treat.mod))

  # outcome model/regression:
  fit <- lm(Y ~ X1 + h + A1 + I(A1*X1) + I(A1*h), weights = w2)
  # outcome model/regression:
  # fit <- lm(Y ~ X1 + h + I(X1 * h) +  A1 + I(A1*X1) + I(A1*h) + I(A1*X1*h) , weights = abs(A1 - fitted(treat.mod)))
  
  Psi113[j,1:6] <- as.vector(fit$coefficients)
  
  

  decision[,1] <- psi[1] + psi[6]*X1 + psi[6]*h
  decision[,2] <- fit$coefficients[4] + fit$coefficients[5]*X1 + fit$coefficients[6]*h
  decision[,3] <- sign(decision[,1] )==sign(decision[,2])
  prop <- sum(decision[,3])/n
  Psi113[j,7] <- prop
  
  
  # population average outcome following teh prescribed treatment rule
  
  Psi113[j, 8] <- sum (apply( cbind(X1,h), 1, outcome, fit$coefficients[1],fit$coefficients[2],fit$coefficients[3],
                             fit$coefficients[4],fit$coefficients[5], fit$coefficients[6]))/length(X1)
}
colnames(Psi113) <- c("beta0", "beta 1", "beta 2","psi0", "psi1","psi2","correct ratio" ,"population average outcome")
Psi113[1:10,]

```

```{r}
apply(Psi113, 2, mean)

boxplot(Psi113[,4], Psi113[,5], Psi113[,6],  names=c("Psi0", "Psi1", "Psi2") )
abline(h = 1, col = "green")
abline(h = -2, col = "red") 
```










###########################################################################



#####################################################
# Scenario 1.2: 
- Blip function : $\gamma_j(x_j, a_j; \psi_j) = a_j(\psi_{j0} + \psi_{j1}x_{j} + \psi_{j2}*h + \psi_{j3}*x*h)$ $\;$
wherer $h =1$ if a person linked to the subject(such as spouse) receives the treatment, and $h =0$ otherwise.
Truth : $$\mathop{\mathbb{E}[Y | \sim]}= \beta_0 + \beta_1X + \beta_2 X^2 + A(\psi_0 + \psi_1X + \psi_2H + \psi_3 HX)$$
- H is generated by X_h. 

## model 1.2.1: 
$$\mathop{\mathbb{E}[Y | \sim]}= \beta_0 + \beta_1X + A(\psi_0 + \psi_1X )$$
with weight $w_{a,h}(x) = |a - \mathop{\mathbb{E}[A | X_i=x_i]} |$
```{r}
expit <- function(x) 1/(1 + exp(-x)) 
# compute population average outcome following teh prescribed treatment rule
# b0, b1, psi0, psi1 are all estimated parameters from your proposed model.  (outcome need to be changed according to your proposed mdoel)

outcome <- function(x, b0, b1, psi0, psi1) {
  a <- if ( (psi0 + psi1*x ) > 0 )  1 else 0
  yavg <- b0 + b1*x + a
  yavg
}

#x <- c(1:10)
# sum (sapply(x, outcome, 1,1,1,1))/length(x)

alpha0 <- c(-2, -1, 0, 1,2)
alpha1 <- c(-2, -1, 0, 1,2)

psi <-c(-2, -1, -.5, 0, .5, 1, 2)
    beta <- c(-1, -.5, 0, .5, 1, 2)


m <-1000  # m replications
n <-10000
Psi51 <- matrix(0, nrow = m, ncol =6)
decision <- matrix(0, nrow = n, 3)
for (j in 1:m) {
  # N = 1000, for first 500 are ego, and second 500 are alters. 
  X <- rnorm(n) + 2
  Xsq <- X^2
  A <- rbinom(n, 1, expit( alpha0[3] + alpha1[2]*X))
  # generate ego data
  X1 <- X[1:(n/2)]
  X12 <- Xsq[1:(n/2)]
  A1 <- A[1:(n/2)]
  # generate alters treatment
  h <- A[(n/2 +1) : n]
  X_h <- X[(n/2 +1) : n]
  ## for Y
  gamma1 <- A1 * (psi[1] + psi[6]*X1 + psi[6]*h + psi[6]*X1*h)
  Y <- beta[6] + beta[5]*X1 + beta[4]*(X12)  + gamma1 + rnorm(n/2)
  ### Treatment model 

  treat.mod <- glm(A1~X1, family = 'binomial')
  
  # H.treat.mod <- glm(h~X_h, family = 'binomial')

  w = abs(A1 - fitted(treat.mod))

  # outcome model/regression:
  fit <- lm(Y ~ X1 + A1 + I(A1*X1) , weights = w)
  # outcome model/regression:
  # fit <- lm(Y ~ X1 + h + I(X1 * h) +  A1 + I(A1*X1) + I(A1*h) + I(A1*X1*h) , weights = abs(A1 - fitted(treat.mod)))
  
  Psi51[j,1:4] <- as.vector(fit$coefficients)

  # decision correct ration
  decision[,1] <- psi[1] + psi[6]*X1 + psi[6]*h + psi[6]*X1*h
  decision[,2] <- fit$coefficients[3] + fit$coefficients[4]*X1
  decision[,3] <- sign(decision[,1] )==sign(decision[,2])
  prop <- sum(decision[,3])/n
  Psi51[j,5] <- prop
  
  
  # population average outcome following teh prescribed treatment rule
  Psi51[j, 6] <- sum (sapply(X1, outcome, fit$coefficients[1],fit$coefficients[2],fit$coefficients[3],fit$coefficients[4]))/length(X1)
}
colnames(Psi51) <- c("beta0", "beta 1", "psi0", "psi1","correct ratio", "population average outcome")
Psi51[1:10,]

```
```{r}
apply(Psi51, 2, mean)
#proph <- apply(Psi51, 2, mean)[5]
#proph
boxplot(Psi51[,3], Psi51[,4], names=c("Psi0", "Psi1") )
abline(h = 1, col = "green")
abline(h = .5, col = "red") 
```


## model 1.2.2: 
$$\mathop{\mathbb{E}[Y | \sim]}= \beta_0 + \beta_1X + A(\psi_0 + \psi_1X + \psi_2H + \psi_3 HX)$$
with weight $w_{a,t}(x) = |a - \mathop{\mathbb{E}[A | X_i=x_i]} |*|h - \mathop{\mathbb{E}[H | X_j=x_j]}|$
```{r}
expit <- function(x) 1/(1 + exp(-x)) 

outcome <- function( mat, b0, b1, psi0, psi1, psi2, psi3) {
  # the 1st column of mat is x, and 2nd column is h. 
  a <- if ( (psi0 + psi1*mat[1] + psi2*mat[2] + psi3*mat[1]*mat[2]) > 0 )  1 else 0
  y <- b0 + b1*mat[1] + a
  y
}

alpha0 <- c(-2, -1, 0, 1,2)
alpha1 <- c(-2, -1, 0, 1,2)

psi <-c(-2, -1, -.5, 0, .5, 1, 2)
beta <- c(-1, -.5, 0, .5, 1, 2)


m <-1000  # m replications
n <-10000
Psi51 <- matrix(0, nrow = m, ncol =8)
decision <- matrix(0, nrow = n, 3)
for (j in 1:m) {
  # N = 1000, for first 500 are ego, and second 500 are alters. 
  X <- rnorm(n) + 2
  Xsq <- X^2
  A <- rbinom(n, 1, expit( alpha0[3] + alpha1[2]*X))
  # generate ego data
  X1 <- X[1:(n/2)]
  X12 <- Xsq[1:(n/2)]
  A1 <- A[1:(n/2)]
  # generate alters treatment
  h <- A[(n/2 +1) : n]
  X_h <- X[(n/2 +1) : n]
  ## for Y
  gamma1 <- A1 * (psi[1] + psi[6]*X1 + psi[6]*h + psi[5]*X1*h)
  Y <- beta[5] + beta[5]*X1 + beta[4]*(X12) + gamma1 + rnorm(n/2)
  ### Treatment model

  treat.mod <- glm(A1~X1, family = 'binomial')
  
  H.treat.mod <- glm(h~X_h, family = 'binomial')

  w2 = abs(A1 - fitted(treat.mod)) * abs(h - fitted(H.treat.mod))

  # outcome model/regression:
  fit <- lm(Y ~ X1 + A1 + I(A1*X1) + I(A1*h) + I(A1*h*X1), weights = w2)
  # outcome model/regression:
  # fit <- lm(Y ~ X1 + h + I(X1 * h) +  A1 + I(A1*X1) + I(A1*h) + I(A1*X1*h) , weights = abs(A1 - fitted(treat.mod)))
  
  Psi51[j,1:6] <- as.vector(fit$coefficients)
  
  

  decision[,1] <- psi[1] + psi[6]*X1 + psi[6]*h + psi[5]*X1*h
  decision[,2] <- fit$coefficients[3] + fit$coefficients[4]*X1 + fit$coefficients[5]*h + fit$coefficients[6]*X1*h
  decision[,3] <- sign(decision[,1] )==sign(decision[,2])
  prop <- sum(decision[,3])/n
  Psi51[j,7] <- prop
  
    # population average outcome following teh prescribed treatment rule
  
  Psi51[j, 8] <- sum (apply( cbind(X1,h), 1, outcome, fit$coefficients[1],fit$coefficients[2],fit$coefficients[3],
                             fit$coefficients[4],fit$coefficients[5], fit$coefficients[6]))/length(X1)
}
colnames(Psi51) <- c("beta0", "beta 1", "psi0", "psi1","psi2", "psi3","correct ratio", "population average outcome")
Psi51[1:10,]

```

```{r}
apply(Psi51, 2, mean)
(proph <- apply(Psi51, 2, mean)[7])

boxplot(Psi51[,3], Psi51[,4], Psi51[,5], Psi51[,6],  names=c("Psi0", "Psi1", "Psi2", "Psi3") )
abline(h = 1, col = "green")
abline(h = -2, col = "red") 
abline(h = .5, col = "blue") 
```

###########################################################################
## Scenario 1.1.3: 
- Blip function : $\gamma_j(x_j, a_j; \psi_j) = a_j(\psi_{j0} + \psi_{j1}x_{j} + \psi_{j2}*h)$ $\;$
wherer $h =1$ if a person linked to the subject(such as spouse) receives the treatment, and $h =0$ otherwise.
Truth : $$\mathop{\mathbb{E}[Y | \sim]}= \beta_0 + \beta_1X + \beta_2 X^2 + A(\psi_0 + \psi_1X + \psi_2H) $$
- H is generated by X_h. 

## model 1.1.3: 
$$\mathop{\mathbb{E}[Y | \sim]}= \beta_0 + \beta_1X + \beta_2H + A(\psi_0 + \psi_1X + \psi_2H)$$
with weight $w_(x) = |a - \mathop{\mathbb{E}[A | X_i=x_i]} |$
```{r}
expit <- function(x) 1/(1 + exp(-x)) 
outcome <- function( mat, b0, b1, psi0, psi1, psi2, psi3) {
  # the 1st column of mat is x, and 2nd column is h. 
  a <- if ( (psi0 + psi1*mat[1] + psi2*mat[2] + psi3*mat[1]*mat[2]) > 0 )  1 else 0
  y <- b0 + b1*mat[1] + a
  y
}

alpha0 <- c(-2, -1, 0, 1,2)
alpha1 <- c(-2, -1, 0, 1,2)

psi <-c(-2, -1, -.5, 0, .5, 1, 2)
beta <- c(-1, -.5, 0, .5, 1)


m <-1000  # m replications
n <-10000
Psi51 <- matrix(0, nrow = m, ncol =7)
decision <- matrix(0, nrow = n, 3)
for (j in 1:m) {
  # N = 1000, for first 500 are ego, and second 500 are alters. 
  X <- rnorm(n) + 2
  Xsq <- X^2
  A <- rbinom(n, 1, expit( alpha0[3] + alpha1[2]*X))
  # generate ego data
  X1 <- X[1:(n/2)]
  X12 <- Xsq[1:(n/2)]
  A1 <- A[1:(n/2)]
  # generate alters treatment
  h <- A[(n/2 +1) : n]
  # X_h <- X[(n/2 +1) : n]
  ## for Y
  gamma1 <- A1 * (psi0[5] + psi1[5]*X1 + psi2[3]*h)
  Y <- beta[5] + beta[5]*X1 + beta[4]*(X12)  + gamma1
  ### Treatment model

  treat.mod <- glm(A1~X1, family = 'binomial')
  
  # H.treat.mod <- glm(h~X_h, family = 'binomial')

  w2 = abs(A1 - fitted(treat.mod)) # * abs(h - fitted(H.treat.mod))

  # outcome model/regression:
  fit <- lm(Y ~ X1 + h + A1 + I(A1*X1) + I(A1*h), weights = w2)
  # outcome model/regression:
  # fit <- lm(Y ~ X1 + h + I(X1 * h) +  A1 + I(A1*X1) + I(A1*h) + I(A1*X1*h) , weights = abs(A1 - fitted(treat.mod)))
  
  Psi51[j,1:6] <- as.vector(fit$coefficients)
  
  

  decision[,1] <- psi0[5] + psi1[5]*X1 + psi2[3]*h
  decision[,2] <- fit$coefficients[4] + fit$coefficients[5]*X1 + fit$coefficients[6]*h
  decision[,3] <- sign(decision[,1] )==sign(decision[,2])
  prop <- sum(decision[,3])/n
  Psi51[j,7] <- prop
}
colnames(Psi51) <- c("beta0", "beta 1", "beta 2","psi0", "psi1","psi2","correct ratio")
Psi51[1:10,]

```

```{r}
apply(Psi51, 2, mean)
proph <- apply(Psi51, 2, mean)[7]
proph
boxplot(Psi51[,4], Psi51[,5], Psi51[,6],  names=c("Psi0", "Psi1", "Psi2") )
abline(h = 1, col = "green")
abline(h = .5, col = "red") 
```










###########################################################################
## Scenario 1.4: 
- Blip function : $\gamma_j(x_j, a_j; \psi_j) = a_j(\psi_{j0} + \psi_{j1}x_{j} + \psi_{j2}*h)$ $\;$
wherer $h =1$ if a person linked to the subject(such as spouse) receives the treatment, and $h =0$ otherwise.
Truth : $$\mathop{\mathbb{E}[Y | \sim]}= \beta_0 + \beta_1X + \beta_2 X^2 + \beta_2H + A(\psi_0 + \psi_1X + \psi_2H) $$
- H is generated by X_h. 

## model 1.4: 
$$\mathop{\mathbb{E}[Y | \sim]}= \beta_0 + \beta_1X + \beta_2H + A(\psi_0 + \psi_1X + \psi_2H)$$
with weight $w_(x) = |a - \mathop{\mathbb{E}[A | X_i=x_i]} |$
```{r}
expit <- function(x) 1/(1 + exp(-x)) 
alpha0 <- c(-2, -1, 0, 1,2)
alpha1 <- c(-2, -1, 0, 1,2)

psi0 <-c(-1, -.1, 0, .1, 1)
psi1 <-c(-1, -.1, 0, .1, 1)
psi2 <-c(-.5, 0, .5)
beta <- c(-1, -.5, 0, .5, 1, 1.5)


m <-1000  # m replications
n <-10000
Psi51 <- matrix(0, nrow = m, ncol =6)
decision <- matrix(0, nrow = n, 3)
for (j in 1:m) {
  # N = 1000, for first 500 are ego, and second 500 are alters. 
  X <- rnorm(n) + 2
  Xsq <- X^2
  A <- rbinom(n, 1, expit( alpha0[3] + alpha1[2]*X))
  # generate ego data
  X1 <- X[1:(n/2)]
  X12 <- Xsq[1:(n/2)]
  A1 <- A[1:(n/2)]
  # generate alters treatment
  h <- A[(n/2 +1) : n]
  X_h <- X[(n/2 +1) : n]
  ## for Y
  gamma1 <- A1 * (psi0[5] + psi1[5]*X1 + psi2[3]*h)
  Y <- beta[5] + beta[5]*X1 + beta[4]*(X12)  + beta[3]*h  +  gamma1
  ### Treatment model

  treat.mod <- glm(A1~X1, family = 'binomial')
  
  H.treat.mod <- glm(h~X_h, family = 'binomial')

  w2 = abs(A1 - fitted(treat.mod)) * abs(h - fitted(H.treat.mod))

  # outcome model/regression:
  fit <- lm(Y ~ X1  + A1 + I(A1*X1) + I(A1*h), weights = w2)
  # outcome model/regression:
  # fit <- lm(Y ~ X1 + h + I(X1 * h) +  A1 + I(A1*X1) + I(A1*h) + I(A1*X1*h) , weights = abs(A1 - fitted(treat.mod)))
  
  Psi51[j,1:5] <- as.vector(fit$coefficients)
  
  

  decision[,1] <- psi0[5] + psi1[5]*X1 + psi2[3]*h
  decision[,2] <- fit$coefficients[3] + fit$coefficients[4]*X1 + fit$coefficients[5]*h
  decision[,3] <- sign(decision[,1] )==sign(decision[,2])
  prop <- sum(decision[,3])/n
  Psi51[j,6] <- prop
}
colnames(Psi51) <- c("beta0", "beta 1","psi0", "psi1","psi2","correct ratio")
Psi51[1:10,]

```

```{r}
apply(Psi51, 2, mean)
proph <- apply(Psi51, 2, mean)[6]
proph
boxplot(Psi51[,3], Psi51[,4], Psi51[,5],  names=c("Psi0", "Psi1", "Psi2") )
abline(h = 1, col = "green")
abline(h = .5, col = "red") 
```







###########################################################################
## Scenario 1.5: 
- Blip function : $\gamma_j(x_j, a_j; \psi_j) = a_j(\psi_{j0} + \psi_{j1}x_{j} + \psi_{j2}*h)$ $\;$
wherer $h =1$ if a person linked to the subject(such as spouse) receives the treatment, and $h =0$ otherwise.
Truth : $$\mathop{\mathbb{E}[Y | \sim]}= \beta_0 + \beta_1X + \beta_2 X^2 + \beta_3 H + A(\psi_0 + \psi_1X + \psi_2H) $$
- H is generated by X_h. 

## model 1.5: 
$$\mathop{\mathbb{E}[Y | \sim]}= \beta_0 + \beta_1X + \beta_2H + A(\psi_0 + \psi_1X + \psi_2H)$$
with weight $w_(x) = |a - \mathop{\mathbb{E}[A | X_i=x_i]} |$
```{r}
expit <- function(x) 1/(1 + exp(-x)) 
alpha0 <- c(-2, -1, 0, 1,2)
alpha1 <- c(-2, -1, 0, 1,2)

psi0 <-c(-1, -.1, 0, .1, 1)
psi1 <-c(-1, -.1, 0, .1, 1)
psi2 <-c(-.5, 0, .5)
beta <- c(-1, -.5, 0, .5, 1, 1.5)


m <-1000  # m replications
n <-20000
Psi51 <- matrix(0, nrow = m, ncol =7)
decision <- matrix(0, nrow = n, 3)
for (j in 1:m) {
  # N = 1000, for first 500 are ego, and second 500 are alters. 
  X <- rnorm(n) + 2
  Xsq <- X^2
  A <- rbinom(n, 1, expit( alpha0[3] + alpha1[2]*X))
  # generate ego data
  X1 <- X[1:(n/2)]
  X12 <- Xsq[1:(n/2)]
  A1 <- A[1:(n/2)]
  # generate alters treatment
  h <- A[(n/2 +1) : n]
  # X_h <- X[(n/2 +1) : n]
  ## for Y
  gamma1 <- A1 * (psi0[5] + psi1[5]*X1 + psi2[3]*h)
  Y <- beta[5] + beta[5]*X1 + beta[4]*(X12) + beta[3]*h +  gamma1
  ### Treatment model

  treat.mod <- glm(A1~X1, family = 'binomial')
  
  # H.treat.mod <- glm(h~X_h, family = 'binomial')

  w2 = abs(A1 - fitted(treat.mod)) # * abs(h - fitted(H.treat.mod))

  # outcome model/regression:
  fit <- lm(Y ~ X1 + h + A1 + I(A1*X1) + I(A1*h), weights = w2)
  # outcome model/regression:
  # fit <- lm(Y ~ X1 + h + I(X1 * h) +  A1 + I(A1*X1) + I(A1*h) + I(A1*X1*h) , weights = abs(A1 - fitted(treat.mod)))
  
  Psi51[j,1:6] <- as.vector(fit$coefficients)
  
  

  decision[,1] <- psi0[5] + psi1[5]*X1 + psi2[3]*h
  decision[,2] <- fit$coefficients[4] + fit$coefficients[5]*X1 + fit$coefficients[6]*h
  decision[,3] <- sign(decision[,1] )==sign(decision[,2])
  prop <- sum(decision[,3])/n
  Psi51[j,7] <- prop
}
colnames(Psi51) <- c("beta0", "beta 1", "beta 2","psi0", "psi1","psi2","correct ratio")
Psi51[1:10,]

```

```{r}
apply(Psi51, 2, mean)
proph <- apply(Psi51, 2, mean)[7]
proph
boxplot(Psi51[,4], Psi51[,5], Psi51[,6],  names=c("Psi0", "Psi1", "Psi2") )
abline(h = 1, col = "green")
abline(h = .5, col = "red") 
```



































# Scenario 2:(Network Interference)
Let individual $i$ with a treatment $A_i = a_i$, $T_i = \sum_{j=1}^{n}A_jN_{ij}$ is the number of $i's$ treated neighbors, and $\gamma_i = \sum_{j=1}^{n}N_{ij}$ is the degree of individual $i$.
## Scenario 2.1: 
- Blip function : $\gamma_j(x_j, a_j; \psi_j) = a_j(\psi_{j0} + \psi_{j1}x_{j} + \psi_{j2}*t)$ $\;$

Truth : $$\mathop{\mathbb{E}[Y | \sim]}= \beta_0 + \beta_1X + \beta_2 X^2 + A(\psi_0 + \psi_1X + \psi_2T) $$


## model 2.1: 
$$\mathop{\mathbb{E}[Y | \sim]}= \beta_0 + \beta_1X + A(\psi_0 + \psi_1X + \psi_2T)$$
with weight $w_{a,t}(x) = |a - \mathop{\mathbb{E}[A | X_i=x_i]} |*|t - \mathop{\mathbb{E}[T | X_j=x_j]}|$

```{r}
expit <- function(x) 1/(1 + exp(-x)) 
alpha0 <- c(-2, -1, 0, 1,2)
alpha1 <- c(-2, -1, 0, 1,2)

psi0 <-c(-1, -.1, 0, .1, 1)
psi1 <-c(-1, -.1, 0, .1, 1)
psi2 <-c(-.5, 0, .5)
beta <- c(-1, -.5, 0, .5, 1)
n <- 8000
# (n is number of nodes, power is the power of attachment (1 is linear); m is the number of edges added on each time step)
ba <- sample_pa(n = n, power =1, m =1, directed = F)
plot(ba, vertex.size = 6, vertex.label = NA)
# access vertices and edges
#E(ba) 
#V(ba)
# network adjancy matrix
#ba[]
m <-800 # m replications
Psi <- matrix(0, nrow = m, ncol =6)
decision <- matrix(0, nrow = n, 3)
for (j in 1:m) {
  # add attributes to network, vertices or degres:
  V(ba)$X <- rnorm(n) +2
  V(ba)$Xsq <- V(ba)$X^2
  V(ba)$A <- rbinom(n, 1, expit( alpha0[3] + alpha1[2]* V(ba)$X ))

  # information about treated neighbors. 
  # trt_nb <- as.vector(ba[] %*% V(ba)$A )
  # information about scalared indirect effect. 
  # ind_eff <- trt_nb/apply(ba[], 1, sum)
  ind_eff <- as.vector(ba[] %*% V(ba)$A )
  # generate ego data (first n/2)
  X1 <- V(ba)$X[1:(n/2)]
  X12 <- V(ba)$Xsq[1:(n/2)]
  A1 <- V(ba)$A[1:(n/2)]

#h <- trt_nb[1:(n/2)] 
#X_h <- V(ba)$X[(n/2 +1) : n]

  gamma1 <- A1 * (psi0[5] + psi1[5]*X1 + psi2[3]*ind_eff[1:(n/2)])  # ind_eff we just use first n/2
  Y <- beta[5] + beta[5]*X1 + beta[4]*(X12)  + gamma1
  ### Treatment model

  treat.mod <- glm(A1~X1, family = 'binomial')
  treat <- glm(V(ba)$A ~ V(ba)$X, family = 'binomial')   # propensity is fitted values of treat
  prop.nb <- as.vector(ba[] %*% fitted(treat) )
  
#H.treat.mod <- glm(h~X_h, family = 'binomial')

  w2 = abs(A1 - fitted(treat.mod)) * abs(ind_eff[1:(n/2)] - prop.nb[1:(n/2)])

  # outcome model/regression:
  fit <- lm(Y ~ X1 + A1 + I(A1*X1) + I(A1*ind_eff[1:(n/2)]), weights = w2)
  # outcome model/regression:
  # fit <- lm(Y ~ X1 + h + I(X1 * h) +  A1 + I(A1*X1) + I(A1*h) + I(A1*X1*h) , weights = abs(A1 - fitted(treat.mod)))
  
  Psi[j,1:5] <- as.vector(fit$coefficients)
  
  decision[,1] <- psi0[5] + psi1[5]*X1 + psi2[3]*ind_eff[1:(n/2)]
  decision[,2] <- fit$coefficients[3] + fit$coefficients[4]*X1 + fit$coefficients[5]*ind_eff[1:(n/2)]
  decision[,3] <- sign(decision[,1] )==sign(decision[,2])
  prop <- sum(decision[,3])/n
  Psi[j,6] <- prop
}
  
colnames(Psi) <- c("beta0", "beta 1", "psi0", "psi1","psi2","correct ratio")
Psi[1:10,]
```

```{r}
apply(Psi, 2, mean)
proph <- apply(Psi, 2, mean)[6]
proph
boxplot(Psi[,3], Psi[,4], Psi[,5],  names=c("Psi0", "Psi1", "Psi2") )
abline(h = 1, col = "green")
abline(h = .5, col = "red") 
```


# Scenario 2.2: 
- Blip function : $\gamma_j(x_j, a_j; \psi_j) = a_j(\psi_{j0} + \psi_{j1}x_{j} + \psi_{j2}*t + \psi_{j3}*x*t)$ $\;$
where $t$ is the number of treated neighbors.
Truth : $$\mathop{\mathbb{E}[Y | \sim]}= \beta_0 + \beta_1X + \beta_2 X^2 + A(\psi_0 + \psi_1X + \psi_2T + \psi_3 TX)$$

# model 2.2: 
$$\mathop{\mathbb{E}[Y | \sim]}= \beta_0 + \beta_1X + A(\psi_0 + \psi_1X + \psi_2T + \psi_3 TX)$$
with weight $w_{a,h}(x) = |a - \mathop{\mathbb{E}[A | X_i=x_i]} |*|t - \mathop{\mathbb{E}[T | X_j=x_j]}|$



```{r}
expit <- function(x) 1/(1 + exp(-x)) 
alpha0 <- c(-2, -1, 0, 1,2)
alpha1 <- c(-2, -1, 0, 1,2)

psi0 <-c(-1, -.1, 0, .1, 1)
psi1 <-c(-1, -.1, 0, .1, 1)
psi2 <-c(-.5, 0, .5)
beta <- c(-1, -.5, 0, .5, 1)
n <- 10000
ba <- sample_pa(n = n, power =1, m =1, directed = F)
plot(ba, vertex.size = 6, vertex.label = NA)
# access vertices and edges
#E(ba) 
#V(ba)
# network adjancy matrix
#ba[]
m <-1000# m replications
Psi <- matrix(0, nrow = m, ncol =7)
decision <- matrix(0, nrow = n, 3)
for (j in 1:m) {
  # add attributes to network, vertices or degres:
  V(ba)$X <- rnorm(n) +2
  V(ba)$Xsq <- V(ba)$X^2
  V(ba)$A <- rbinom(n, 1, expit( alpha0[3] + alpha1[2]* V(ba)$X ))

  # information about treated neighbors. 
  # trt_nb <- as.vector(ba[] %*% V(ba)$A )
  # information about scalared indirect effect. 
  # ind_eff <- trt_nb/apply(ba[], 1, sum)
  ind_eff <- as.vector(ba[] %*% V(ba)$A )
  # generate ego data (first n/2)
  X1 <- V(ba)$X[1:(n/2)]
  X12 <- V(ba)$Xsq[1:(n/2)]
  A1 <- V(ba)$A[1:(n/2)]

#h <- trt_nb[1:(n/2)] 
#X_h <- V(ba)$X[(n/2 +1) : n]

  gamma1 <- A1 * (psi0[5] + psi1[5]*X1 + psi2[3]*ind_eff[1:(n/2)] + psi2[3]*X1*ind_eff[1:(n/2)])  # ind_eff we just use first n/2
  Y <- beta[5] + beta[5]*X1 + beta[4]*(X12) + gamma1
  ### Treatment model

  treat.mod <- glm(A1~X1, family = 'binomial')
  treat <- glm(V(ba)$A ~ V(ba)$X, family = 'binomial')   # propensity is fitted values of treat
  prop.nb <- as.vector(ba[] %*% fitted(treat) )
  
#H.treat.mod <- glm(h~X_h, family = 'binomial')

  w2 = abs(A1 - fitted(treat.mod)) * abs(ind_eff[1:(n/2)] - prop.nb[1:(n/2)])

  # outcome model/regression:
  fit <- lm(Y ~ X1 + A1 + I(A1*X1) + I(A1*ind_eff[1:(n/2)]) + I(A1*ind_eff[1:(n/2)]*X1), weights = w2)
  # outcome model/regression:
  # fit <- lm(Y ~ X1 + h + I(X1 * h) +  A1 + I(A1*X1) + I(A1*h) + I(A1*X1*h) , weights = abs(A1 - fitted(treat.mod)))
  
  Psi[j,1:6] <- as.vector(fit$coefficients)
  
  decision[,1] <- psi0[5] + psi1[5]*X1 + psi2[3]*ind_eff[1:(n/2)] + psi2[3]*X1*ind_eff[1:(n/2)]
  decision[,2] <- fit$coefficients[3] + fit$coefficients[4]*X1 
                  + fit$coefficients[5]*ind_eff[1:(n/2)]+fit$coefficients[6]*X1*ind_eff[1:(n/2)]
  decision[,3] <- sign(decision[,1] )==sign(decision[,2])
  prop <- sum(decision[,3])/n
  Psi[j,7] <- prop
}
  
colnames(Psi) <- c("beta0", "beta 1", "psi0", "psi1","psi2","psi3", "correct ratio")
Psi[1:10,]
```

```{r}
apply(Psi, 2, mean)
proph <- apply(Psi, 2, mean)[7]
proph
boxplot(Psi[,3], Psi[,4], Psi[,5], Psi[,6], names=c("Psi0", "Psi1", "Psi2","psi3") )
abline(h = 1, col = "green")
abline(h = .5, col = "red") 
```
